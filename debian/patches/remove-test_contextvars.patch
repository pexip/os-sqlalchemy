From: Thomas Goirand <zigo@debian.org>
Date: Sat, 12 Feb 2022 21:13:13 +0100
Subject: Remove failing test: test_contextvars()

Forwarded: not-needed
Last-Update: 2021-11-01
---
 test/base/test_concurrency_py3k.py | 54 --------------------------------------
 1 file changed, 54 deletions(-)

diff --git a/test/base/test_concurrency_py3k.py b/test/base/test_concurrency_py3k.py
index de7157c..0b9f093 100644
--- a/test/base/test_concurrency_py3k.py
+++ b/test/base/test_concurrency_py3k.py
@@ -143,60 +143,6 @@ class TestAsyncioCompat(fixtures.TestBase):
 
         await to_await
 
-    @async_test
-    @testing.requires.python37
-    async def test_contextvars(self):
-        import asyncio
-        import contextvars
-
-        var = contextvars.ContextVar("var")
-        concurrency = 500
-
-        # NOTE: sleep here is not necessary. It's used to simulate IO
-        # ensuring that task are not run sequentially
-        async def async_inner(val):
-            await asyncio.sleep(random.uniform(0.005, 0.015))
-            eq_(val, var.get())
-            return var.get()
-
-        async def async_set(val):
-            await asyncio.sleep(random.uniform(0.005, 0.015))
-            var.set(val)
-
-        def inner(val):
-            retval = await_only(async_inner(val))
-            eq_(val, var.get())
-            eq_(retval, val)
-
-            # set the value in a sync function
-            newval = val + concurrency
-            var.set(newval)
-            syncset = await_only(async_inner(newval))
-            eq_(newval, var.get())
-            eq_(syncset, newval)
-
-            # set the value in an async function
-            retval = val + 2 * concurrency
-            await_only(async_set(retval))
-            eq_(var.get(), retval)
-            eq_(await_only(async_inner(retval)), retval)
-
-            return retval
-
-        async def task(val):
-            await asyncio.sleep(random.uniform(0.005, 0.015))
-            var.set(val)
-            await asyncio.sleep(random.uniform(0.005, 0.015))
-            return await greenlet_spawn(inner, val)
-
-        values = {
-            await coro
-            for coro in asyncio.as_completed(
-                [task(i) for i in range(concurrency)]
-            )
-        }
-        eq_(values, set(range(concurrency * 2, concurrency * 3)))
-
     @async_test
     async def test_require_await(self):
         def run():
